#!/usr/bin/env bash
################################################################################
RAW_GITHUB_REPO_URL="${RAW_GITHUB_REPO_URL:-\
"https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"}"
# shellcheck disable=SC1090
source <(curl -s "${RAW_GITHUB_REPO_URL}/misc/shared.func")
################################################################################

# This function enables IPv6 if it's not disabled and
# sets verbose mode if the global variable is set to "yes"
verb_ip6() {
  verbose_mode
  if [[ "${DISABLEIPV6}" == "yes" ]]; then
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf
    "${STD}" sysctl -p
  fi
}

# This function sets up the Container OS by generating the locale,
# setting the timezone, and checking the network connection
setting_up_container() {
  msg_info "Setting up Container OS"
  sed -i "/${LANG}/ s/\(^# \)//" /etc/locale.gen
  locale_line=$(grep -v '^#' /etc/locale.gen | grep -E '^[a-zA-Z]' |
    awk '{print $1}' | head -n 1)
  echo "LANG=${locale_line}" >/etc/default/locale
  locale-gen >/dev/null
  export LANG="${locale_line}"
  tz="${tz:-}"
  if [[ -z "${tz}" ]]; then
    msg_error "Empty tz var!"
    exit 1
  fi
  echo "${tz}" >/etc/timezone
  ln -sf /usr/share/zoneinfo/"${tz}" /etc/localtime
  RETRY_NUM=10
  RETRY_EVERY=3
  for ((i = RETRY_NUM; i > 0; i--)); do
    if [[ "$(hostname -I)" != "" ]]; then
      break
    fi
    echo 1>&2 -en "${CROSS}${RD} No Network! "
    sleep "${RETRY_EVERY}"
  done
  if [[ "$(hostname -I)" = "" ]]; then
    echo 1>&2 -e "\n${CROSS}${RD} No Network After ${RETRY_NUM} Tries${CL}"
    echo -e " 🖧  Check Network Settings"
    exit 1
  fi
  rm -rf /usr/lib/python3.*/EXTERNALLY-MANAGED
  systemctl disable -q --now systemd-networkd-wait-online.service
  msg_ok "Set up Container OS"
  msg_ok "Network Connected: ${BL}$(hostname -I)"
}

# This function checks the network connection by pinging a known IP address and
# prompts the user to continue if the internet is not connected
network_check() {
  set +e
  trap - ERR
  ipv4_connected=false
  ipv6_connected=false
  sleep 1
  # Check IPv4 connectivity
  if ping -c 1 -W 1 1.1.1.1 &>/dev/null; then
    msg_ok "IPv4 Internet Connected"
    ipv4_connected=true
  else
    msg_error "IPv4 Internet Not Connected"
  fi

  # Check IPv6 connectivity
  if ping6 -c 1 -W 1 2606:4700:4700::1111 &>/dev/null; then
    msg_ok "IPv6 Internet Connected"
    ipv6_connected=true
  else
    msg_error "IPv6 Internet Not Connected"
  fi

  # If both IPv4 and IPv6 checks fail, prompt the user
  if [[ "${ipv4_connected}" == false && "${ipv6_connected}" == false ]]; then
    read -r -p \
      "No Internet detected,would you like to continue anyway? <y/N> " prompt
    if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
      echo -e " ⚠️  ${RD}Expect Issues Without Internet${CL}"
    else
      echo -e " 🖧  Check Network Settings"
      exit 1
    fi
  fi

  RESOLVEDIP=$(getent hosts github.com | awk '{ print $1 }')
  if [[ -z "${RESOLVEDIP}" ]]; then
    msg_error "DNS Lookup Failure"
  else
    msg_ok "DNS Resolved github.com to ${BL}${RESOLVEDIP}${CL}"
  fi
  set -e
  trap 'error_handler "${LINENO}" "${BASH_COMMAND}"' ERR
}

# This function updates the Container OS by running apt-get update and upgrade
update_os() {
  msg_info "Updating Container OS"
  if [[ "${CACHER}" == "yes" ]]; then
    echo \
      "Acquire::http::Proxy-Auto-Detect \"/usr/local/bin/apt-proxy-detect.sh\";" \
      >/etc/apt/apt.conf.d/00aptproxy
    cat <<EOF >/usr/local/bin/apt-proxy-detect.sh
#!/bin/bash
if nc -w1 -z "${CACHER_IP}" 3142; then
  echo -n "http://${CACHER_IP}:3142"
else
  echo -n "DIRECT"
fi
EOF
    chmod +x /usr/local/bin/apt-proxy-detect.sh
  fi
  "${STD}" apt-get update
  "${STD}" apt-get -o Dpkg::Options::="--force-confold" -y dist-upgrade
  rm -rf /usr/lib/python3.*/EXTERNALLY-MANAGED
  msg_ok "Updated Container OS"
}

# This function modifies the message of the day (motd) and SSH settings
motd_ssh() {
  echo "export TERM='xterm-256color'" >>/root/.bashrc
  echo -e "${APPLICATION} LXC provided by https://helper-scripts.com/\n" \
    >/etc/motd
  chmod -x /etc/update-motd.d/*
  if [[ "${SSH_ROOT}" == "yes" ]]; then
    sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" \
      /etc/ssh/sshd_config
    systemctl restart sshd
  fi
}

# This function customizes the container by modifying the getty service and
# enabling auto-login for the root user
customize() {
  if [[ "${PASSWORD}" == "" ]]; then
    msg_info "Customizing Container"
    GETTY_OVERRIDE="/etc/systemd/system/container-getty@1.service.d/override.conf"
    mkdir -p "$(dirname ${GETTY_OVERRIDE})"
    cat <<EOF >"${GETTY_OVERRIDE}"
  [Service]
  ExecStart=
  ExecStart=-/sbin/agetty --autologin root --noclear --keep-baud tty%I 115200,38400,9600 \${TERM}
EOF
    systemctl daemon-reload
    systemctl restart "$(basename "$(dirname ${GETTY_OVERRIDE})" | sed 's/\.d//')"
    msg_ok "Customized Container"
  fi
  app="${app:-}"
  if [[ -z "${app}" ]]; then
    msg_error "Empty app var!"
    exit 1
  fi
  echo "bash -c \"\$(wget -qLO - ${RAW_GITHUB_REPO_URL}/ct/${app}.sh)\"" \
    >/usr/bin/update
  chmod +x /usr/bin/update
}

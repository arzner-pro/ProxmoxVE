#!/usr/bin/env bash
################################################################################
RAW_GITHUB_REPO_URL="${RAW_GITHUB_REPO_URL:-\
"https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"}"
# shellcheck disable=SC1090
source <(curl -s "${RAW_GITHUB_REPO_URL}/misc/shared.func")
################################################################################

verb_ip6() {
  verbose_mode
  if [[ "${DISABLEIPV6}" == "yes" ]]; then
    "${STD}" sysctl -w net.ipv6.conf.all.disable_ipv6=1
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf
    "${STD}" rc-update add sysctl default
  fi
}

setting_up_container() {
  msg_info "Setting up Container OS"
  RETRY_NUM=10
  RETRY_EVERY=3
  local i="${RETRY_NUM}"
  while [[ "${i}" -gt 0 ]]; do
    if [[ "$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' |
      awk '{print $2}' | cut -d'/' -f1)" != "" ]]; then
      break
    fi
    echo 1>&2 -en "${CROSS}${RD} No Network!"
    sleep "${RETRY_EVERY}"
    i=$((i - 1))
  done
  if [[ "$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' |
    awk '{print $2}' | cut -d'/' -f1)" = "" ]]; then
    echo 1>&2 -e "\n${CROSS}${RD} No Network After ${RETRY_NUM} Tries${CL}"
    echo -e " 🖧  Check Network Settings"
    exit 1
  fi
  msg_ok "Set up Container OS"
  msg_ok "Network Connected: ${BL}$(ip addr show | grep 'inet ' |
    awk '{print $2}' | cut -d'/' -f1 | tail -n1)${CL}"
}

network_check() {
  set +e
  trap - ERR
  if ping -c 1 -W 1 1.1.1.1 &>/dev/null; then
    msg_ok "Internet Connected"
  else
    msg_error "Internet NOT Connected"
    read -r -p "Would you like to continue anyway? <y/N> " prompt
    if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
      echo -e " ⚠️  ${RD}Expect Issues Without Internet${CL}"
    else
      echo -e " 🖧  Check Network Settings"
      exit 1
    fi
  fi
  RESOLVEDIP=$(getent hosts github.com | awk '{ print $1 }')
  if [[ -z "${RESOLVEDIP}" ]]; then
    msg_error "DNS Lookup Failure"
  else
    msg_ok "DNS Resolved github.com to ${BL}${RESOLVEDIP}${CL}"
  fi
  set -e
  trap 'error_handler "${LINENO}" "${BASH_COMMAND}"' ERR
}

update_os() {
  msg_info "Updating Container OS"
  "${STD}" apk update
  "${STD}" apk upgrade
  msg_ok "Updated Container OS"
}

motd_ssh() {
  echo "export TERM='xterm-256color'" >>/root/.bashrc
  echo -e "${APPLICATION} LXC provided by https://Helper-Scripts.com/\n" \
    >/etc/motd
  if [[ "${SSH_ROOT}" == "yes" ]]; then
    "${STD}" rc-update add sshd
    sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" \
      /etc/ssh/sshd_config
    "${STD}" /etc/init.d/sshd start
  fi
}

customize() {
  if [[ "${PASSWORD}" == "" ]]; then
    msg_info "Customizing Container"
    bash -c "passwd -d root" >/dev/null 2>&1
    msg_ok "Customized Container"
  fi
}

#!/usr/bin/env bash
################################################################################

# This function sets various color variables using ANSI escape codes for
# formatting text in the terminal.
color() {
  export YW="\033[33m"
  export YWB="\033[93m"
  export BL="\033[36m"
  export RD="\033[01;31m"
  export BGN="\033[4;92m"
  export GN="\033[1;92m"
  export DGN="\033[32m"
  export CL="\033[m"
  export CM="${GN}✓${CL}"
  export CROSS="${RD}✗${CL}"
  export BFR="\\r\\033[K"
  export HOLD=" "
}

# This function enables error handling in the script by setting options and
# defining a trap for the ERR signal.
catch_errors() {
  set -Eeuo pipefail
  trap 'error_handler "${LINENO}" "${BASH_COMMAND}"' ERR
}

# This function is called when an error occurs. It receives the exit code,
# line number, and command that caused the error, and displays an error message.
error_handler() {
  kill_spinner
  printf "\e[?25h"
  local exit_code="$?"
  local line_number="${1}"
  local command="${2}"
  local error_message="${RD}[ERROR]${CL} in line ${RD}${line_number}${CL}: \
exit code ${RD}${exit_code}${CL}: while executing command ${YW}${command}${CL}"
  echo -e "\n${error_message}\n"
  if [[ "${line_number}" -eq 23 ]]; then
    echo -e "The silent function has suppressed the error, run the script with \
verbose mode enabled, which will provide more detailed output.\n"
  fi
}

kill_spinner() {
  if [[ -n "${SPINNER_PID}" ]] && ps -p "${SPINNER_PID}" >/dev/null; then
    kill "${SPINNER_PID}" >/dev/null
  fi
}

# This function displays a spinner.
spinner() {
  local chars="/-\|"
  local spin_i=0
  printf "\e[?25l"
  while true; do
    printf "\r \e[36m%s\e[0m" "${chars:spin_i++%${#chars}:1}"
    sleep 0.1
  done
}

# This function displays an informational message with a yellow color.
msg_info() {
  local msg="${1}"
  echo -ne " ${HOLD} ${YW}${msg}   "
  spinner &
  SPINNER_PID=$!
}

# This function displays a success message with a green color.
msg_ok() {
  kill_spinner
  printf "\e[?25h"
  local msg="${1}"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

# This function displays a error message with a red color.
msg_error() {
  kill_spinner
  printf "\e[?25h"
  local msg="${1}"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

verbose_mode() {
  if [[ "${VERBOSE}" = "yes" ]]; then
    export STD=""
  else
    silent() {
      # shellcheck disable=SC2317
      "$@" >/dev/null 2>&1
    }
    export STD="silent"
  fi
}
